filter {
    if [type] == "httpd_access" {
        grok {
            match => {
                "message" => "%{HTTPD_COMBINEDLOG}"
            }
        }

	grok {
	    match => {
		"path" => "%{GREEDYDATA}/%{DATA:server.domain}-access\.log"
		}
	}

        if "_grokparsefailure" not in [tags] {
            date {
                locale => "en"
                match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
                remove_field => [ "timestamp" ]
            }

            mutate {
                rename => {
                    "httpversion" => "http.version"
                    "request" => "url.original"
                    "auth" => "client.user.name"
                    "agent" => "user_agent.original"
                    "clientip" => "client.ip"
                    "bytes" => "http.response.bytes"
                    "response" => "http.response.status_code"
                    "verb" => "http.request.method"
                    "referrer" => "http.request.referrer"
                }
                convert => {
                    "http.response.bytes" => "integer"
                    "http.response.status_code" => "integer"
                }
                gsub => [
                    "http.request.referrer", "(?:^\"|\"$)", "",
                    "user_agent.original", "(?:^\"|\"$)", ""
                ]
                remove_field => [ "ident", "rawrequest", "message" ]
            }

            geoip {
                source => "client.ip"
                target => "client.geo"
            }

            useragent {
                source => "user_agent.original"
                prefix => "user_agent."
            }
        }
    }

    if [type] == "httpd_error" {
        date {
            locale => "en"
            match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS yyyy", "dd/MMM/yyyy:HH:mm:ss Z", "yyyy/MM/dd HH:mm:ss" ]
            remove_field => [ "timestamp" ]
        }

        grok {
            match => {
                "message" => [
                    "%{HTTPD_ERRORLOG}",        # Apache
                    "(?<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[%{WORD:event.level}\] %{INT:process.pid}#%{INT:process.tid}: \*%{INT:event.cid} %{GREEDYDATA:message}"         # Nginx
                ]
            }
            overwrite => [ "message" ]
        }

	grok {
	    match => {
		"path" => "%{GREEDYDATA}/%{DATA:server.domain}-error\.log"
		}
	}

        mutate {
            rename => {
                "module" => "event.module"
                "clientip" => "client.ip"
                "errorcode" => "event.code"
                "tid" => "event.id"
                "loglevel" => "event.level"
                "proxy_errorcode" => "proxy.errorcode"
                "proxy_message" => "proxy.message"
            }
            remove_field => [ "clientport" ]
        }
    }
}
