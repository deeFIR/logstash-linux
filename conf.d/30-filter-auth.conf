# Derived from logstash-linux project: https://github.com/thomaspatzke/logstash-linux/blob/master/conf.d/30-filter-auth.conf (GPL-3.0)

filter {
  if [type] == "syslog" {
    if [message] =~ /^pam_/ {
      mutate {
          replace => { "event.module" => "pam" }
      }

      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{PAM}" }
        remove_field => [ "message" ]
      }

      if [kvdata] {
        mutate {
          gsub => [ "kvdata", "= ", '=- ' ]
        }
        kv {
          source => "kvdata"
          prefix => "pam."
          remove_field => [ "kvdata" ]
        }
      }

      if [pam.message] =~ /^Authentication failure/ {
        mutate {
          rename => { "pam.user" => "user.name" }
          add_field => {
            "event.action" => "authentication"
            "event.outcome" => "fail"
          }
          remove_field => [ "pam.message" ]
        }
      }
      else if [pam.message] =~ /^session opened/ {
        mutate {
          add_field => {
            "event.action" => "session"
            "event.outcome" => "success"
          }
          remove_field => [ "pam.message" ]
        }
      }
      else if [pam.message] =~ /^session closed/ {
        mutate {
          add_field => {
            "event.action" => "session"
            "event.outcome" => "close"
          }
          remove_field => [ "pam.message" ]
        }
      }
      else if [service.name] == "passwd" {
        mutate {
          add_field => {
            "event.action" => "passwd"
          }
          remove_field => [ "pam.message" ]
        }
      }
    } else if [event.provider] == "sshd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
        add_field => {
          "event.action" => "authentication"
          "event.outcome" => "fail"
          "event.reason" => "wrong_credentials"
        }
        remove_field => [ "message" ]
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
        add_field => {
          "event.action" => "authentication"
          "event.outcome" => "fail"
          "event.reason" => "unknown_user"
        }
        remove_field => [ "message" ]
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SSH_AUTH_SUCCESS}" }
        add_field => {
          "event.action" => "authentication"
          "event.outcome" => "success"
        }
        remove_field => [ "message" ]
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SSH_DISCONNECT}|%{SSH_DISCONNECTED}|%{SSH_CLOSED}" }
        add_field => {
          "event.outcome" => "disconnect"
        }
        remove_field => [ "message" ]
      }

      if [event.outcome] {
        geoip {
          source => "client.ip"
          target => "client.geo"
        }
        mutate {
          remove_tag => [ "_grokparsefailure" ]
          remove_field => [ "message" ]
        }
      }
    } else if [event.provider] == "sudo" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SUDO}" }
        remove_field => [ "message" ]
      }
      if "_grokparsefailure" not in [tags] {
        mutate {
          replace => { "event.provider" => "sudo" }
        }
      }
    } else if [event.provider] == "su" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SU}" }
        remove_field => [ "message" ]
      }
      if "_grokparsefailure" not in [tags] {
        mutate {
          replace => { "event.provider" => "su" }
        }
      }
    } else if [event.provider] == "systemd-logind" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SYSTEMD_LOGIND_NEW}" }
        add_field => { "event.outcome" => "created" }
        remove_tag => [ "_grokparsefailure" ]
        remove_field => [ "message" ]
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{SYSTEMD_LOGIND_REMOVED}" }
        add_field => { "event.outcome" => "removed" }
        remove_tag => [ "_grokparsefailure" ]
        remove_field => [ "message" ]
      }
    } else if [event.provider] in [ "useradd", "groupadd" ] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{ACCOUNT_ADD}" }
        add_field => {
          "event.action" => "create"
        }
        remove_field => [ "message" ]
      }
      if [kvdata] {
        mutate {
          gsub => [ "kvdata", ", ", '|' ]
        }
        if [event.provider] == "useradd" {
          kv {
            source => "kvdata"
            prefix => "user."
            field_split => "|"
            remove_field => [ "kvdata" ]
          }
          mutate {
            rename => {
              "user.UID" => "user.id"
              "user.GID" => "user.gid"
            }
          }
        } else {
          kv {
            source => "kvdata"
            prefix => "group."
            field_split => "|"
            remove_field => [ "kvdata" ]
          }
          mutate {
            rename => {
              "group.GID" => "group.id"
            }
          }
        }
      }
    } else if [event.provider] == "usermod" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{USERMOD}" }
        remove_field => [ "message" ]
      }
    } else if [event.provider] == "userdel" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{USERDEL}" }
        add_field => { "event.provider" => "userdel" }
        remove_field => [ "message" ]
      }
      if "_grokparsefailure" not in [tags] {
        mutate {
          gsub => [ "event.action", "remove", "delete" ]
        }
      }
    } else if [event.provider] == "groupdel" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match => { "message" => "%{GROUPDEL}" }
        add_field => {
          "event.provider" => "groupdel"
          "event.action" => "delete"
        }
        remove_field => [ "message" ]
      }
    }
  }
}
